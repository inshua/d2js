d2js.entityMap = {
	name : 'Book', 
	table : 'book', 
	map: {
		author : { type: 'Author', d2js: 'author-entity.d2js', relation: 'one', key: 'author', fk: 'id' },
		// publisher : { type: 'Publisher', d2js: 'publisher-entity.d2js', relation: 'one', key: 'publisher_id', fk: 'id'}		
	}
}

d2js.fetch = function(params){
	sql{.
		select * from book b where 1=1
		code{. 
			sql{.?(params.title) and strpos(b.title, :title) > 0  .}
		
			sql{.?(params.kind) and b.kind = :kind  .}

			if(params.author && params.author instanceof Array && params.author.length){
				params.author = $ARRAY('int', params.author);
				sql{. and b.author = ANY(:author) .}
			} else if(params.author && (params.author *= 1)){
				sql{. and b.author = :author .}
			}
		.}
	.}
	sql = this.orderBy(sql, params._sorts, {'b.title' : 'asc'});
	return this.query(sql, params, params._page).orm(this);
}

d2js.validate = function(rcd, action){
	$V(this, rcd, {title : [V.notNull]})
}

