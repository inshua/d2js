// in book.d2js
d2js.entity_map = {
	name : 'Book', 
	table : 'book', 
	map: {
		author : { type: 'Author', d2js: 'author-entity.d2js', relation: 'one', key: 'author', fk: 'id' },
		publisher : { type: 'Publisher', d2js: 'publisher-entity.d2js', relation: 'one', key: 'publisher_id', fk: 'id'}		
	}
}

d2js.fetch = function(params){
	sql{.
		select b.*, a.name author_name from book b, author a where b.author = a.id
		code{. 
			if(params.title){ 
				sql{. and strpos(b.title, :title) > 0  .}
			}
			if(params.author){ 
				sql{. and author = :author  .}
			}
		.}
	.}
	sql = this.orderBy(sql, params._sorts, {'b.title' : 'asc'});
	return this.query(sql, params, params._page).orm(this);
}

d2js.create = function(rcd){
	logger.info('add book ' + JSON.stringify(rcd));
	this.insertRow('book', rcd, ['title', 'author', 'publish_date', 'kind', 'isbn', 'remarks'])
}

d2js.modify = function(rcd){
	$V(this, rcd, {title : [V.notNull]});
	logger.info('edit book ' + JSON.stringify(rcd));
	this.updateRow('book', rcd, ['id', 'title', 'author', 'publish_date', 'kind', 'isbn', 'remarks'])
}

d2js.destroy = function(rcd){
	logger.info('delete book ' + JSON.stringify(rcd));
	this.deleteRow('book', rcd)
}

d2js.exports.test =
d2js.test =  function(){
	return 'hello';
}
