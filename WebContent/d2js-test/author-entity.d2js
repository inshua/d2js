d2js.entity_map = {
			name : 'Author', 
			// table: 'author',
			map: {
				books : {d2js: 'book.d2js', fk: 'author_id'},	// book.d2js 提供 fetchBy 函数，接收 {author_id: xxx}, 返回一个数组，也可接收 {id:xx} 返回一行，行根据 entity map 设置有type信息。
				fav : {d2js: 'fav.d2js', fk: 'person_id'},
			}
		}
		
		
d2js.fetch = function(params){
	sql{.
		select * from author where 1 = 1
		code{.
			if(params.name){
				sql{. and strpos(name, :name) > 0 .}
			}
		.}
	.}
	
	var r = this.query(this.orderBy(sql, params._sorts, {id:'asc'}), params, params._page);
	return r.orm();
}

d2js.fetchBy = function(by){
	// assert(by.id || by.author)
	sql{.
		select * from author
		sql{.?(by.id) and id = :id .}
	.}
	return this.query(sql).orm();
}

d2js.modify = function(row, columns){
	$V(this, row, {
		name : V.notNull,
		email : V.email,
		info : V.attrs(['linkin']),
		'info,linkin': V.shortest(5)
	});
	
	return this.updateRow('author', row, columns);
}

d2js.number = 1;

d2js.exports.test = d2js.test = function(params, web){
	//logger.info(web.out);
	//logger.info(web.request);
	//logger.info(web.response);
	//logger.info(d2jsRunner);
	// Java.type('java.lang.Thread').sleep(200);
	//logger.info(d2js.number);
	// logger.debug('run on ' + Java.type('java.lang.Thread').currentThread().name);
	return "hello " + (d2js.number ++);
}

