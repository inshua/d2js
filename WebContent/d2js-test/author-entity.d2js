d2js.entityMap = {
	name : 'Author', 
	table: 'author',		// 提供 table 后可不提供 fetchBy 函数，默认使用 D2JS.prototype 的 fetchBy 函数
	map: {
		books : {
				type : 'Book',
				d2js:'/d2js-test/book-entity.d2js', 	// or type : 'Book',  book.d2js 提供 fetchBy 函数，接收 {author: xxx}, 返回一个数组，也可接收 {id:xx} 返回一行，行根据 entity map 设置有type信息。
				relation: 'many', 			// many - array  table - table information(may contains page info)	 one - entity 	value - returned value, such as dictionary mapping value
				key: 'id', 					// optional
				fk: 'author',				// 用于向 fetchBy 提交查询条件，查询条件组织为 {'author': row['id']}
				isOwner : true,				// 强持有关系，先存在本对象再存在关系对象，本对象移除则关系对象追随移除。否则仅解除关系。
		}
	}   
}

d2js.fetch = function(params){
	sql{.
		select * from author where 1 = 1
		code{.
			if(params.name){
				sql{. and strpos(name, :name) > 0 .}
			}
		.}
	.}
	var r = this.query(this.orderBy(sql, params._sorts, {id:'asc'}), params, params._page);
	return r.orm(this, ['Book']);
}


d2js.modify = function(row, columns){
	$V(this, row, {
		name : V.notNull,
		email : V.email,
		info : V.attrs(['linkin']),
		'info,linkin': V.shortest(5)
	});
	return this.updateRow('author', row, columns);
}

d2js.number = 1;

d2js.exports.test = d2js.test = function(params, web){
	//logger.info(web.out);
	//logger.info(web.request);
	//logger.info(web.response);
	//logger.info(d2jsRunner);
	// Java.type('java.lang.Thread').sleep(200);
	//logger.info(d2js.number);
	// logger.debug('run on ' + Java.type('java.lang.Thread').currentThread().name);
	return "hello " + (d2js.number ++);
}

