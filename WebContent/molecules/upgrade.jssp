<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<script src="../jslib/jquery-3.2.1.js"></script>
	<link href="../jslib/bootstrap-3.3.4/css/bootstrap.css" rel="stylesheet" media="screen">
	<script src="../jslib/jquery-3.2.1.js"></script>
	<script src="../jslib/bootstrap-3.3.4/js/bootstrap.min.js"></script>
</head>

<body class=".container">
	<h1>Upgrade molecule to v1</h1>
	<form method="post" enctype="multipart/form-data" action="upgrade.jssp">
		<input type="file" name="file">
		<input type="hidden" name="submit" value="1">
		<input type="submit">
	</form>
	[%
		if (request.submit) {
			var part = request.getPart("file");
			var document = org.jsoup.Jsoup.parse(part.inputStream, "utf-8", "baseUri");
			var defs = document.select("[molecule-def]");

			var template = document.body().prependElement("template");
			for (var j = 0; j < defs.size(); j++) {
				var element = defs.get(j);
				element.remove();
				template.appendChild(element);

				var fullname = element.attr("molecule-def");
				var module = 'noname', name = fullname;
				if (fullname.lastIndexOf('.') != -1) {
					var p = name.lastIndexOf('.');
					module = name.substring(0, p);
					name = name.substr(p + 1);
				}

				var constructor = findConstructor(element, fullname, name);
				if (constructor) {
					constructor.attr('constructor', "");
					var code = constructor.html();
					var reg1 = /\/\/\s*MOLECULE_DEF/, reg2 = /\/\/\s*MOLECULE_DEF_END/;
					var arr = code.split(/\r\n|\n|\r/g), arr2 = [], initCode = '';
					for (var i = 0; i < arr.length; i++) {
						if (reg1.test(arr[i])) {
							for (i = i + 1; i < arr.length; i++) {
								arr2.push(arr[i]);
								if (reg2.test(arr[i])) {
									i++;
									break;
								}
							}
						}
					}
					code = arr2.join('\r\n');
					logger.info(code);
					initCode = arr.slice(i).join('\r\n');
					if (initCode.indexOf('Molecule.extend') != -1) {
						constructor.attr('extends', '');
					}
					var pattern = java.util.regex.Pattern.compile("function\\s+[\\w]+\\s*\\(.*\\)\\s*\\{", "m");
					var m = pattern.matcher(code);
					m.find();
					code = code.substr(m.end() + 1);
					code = code.substring(0, code.lastIndexOf('}') - 1);
					constructor.html(code);
				}
			}

			%]<pre>[%- document.outerHtml() %]</pre> [%
		}


		function findConstructor(element, fullname, name) {
			var scripts = element.select('script');
			if (scripts.isEmpty()) {
				var n = element.nextElementSibling();
				if (n && n.tagName() == 'script' && (n.attr('molecule-for') == fullname || n.attr('molecule-for') == name)) {
					return n;
				}
			} else {
				for (var i = 0; i < scripts.size(); i++) {
					if (/\/\/\s*MOLECULE_DEF/.test(scripts[i].html())) {
						return scripts[i];
					}
				}
			}
		}
	%]
</body>

</html>