[%
	if (request.submit) {
		response.contentType = 'plain/text; utf-8;
		
		var part = request.getPart("file");
		var document = org.jsoup.Jsoup.parse(part.inputStream, "utf-8", "baseUri");
		var defs = document.select("[molecule-def]");

		var template = document.body().prependElement("template");
		for (var j = 0; j < defs.size(); j++) {
			var element = defs.get(j);
			element.remove();
			template.appendChild(element);

			var fullname = element.attr("molecule-def");
			var module = 'noname', name = fullname;
			if (fullname.lastIndexOf('.') != -1) {
				var p = name.lastIndexOf('.');
				module = name.substring(0, p);
				name = name.substr(p + 1);
			}

			var constructor = findConstructor(element, fullname, name);
			if (constructor) {
				constructor.attr('constructor', "");
				var code = constructor.html();
				var reg1 = /\/\/\s*MOLECULE_DEF/, reg2 = /\/\/\s*MOLECULE_DEF_END/;
				var arr = code.split(/\r\n|\n|\r/g), arr2 = [], initCode = '';
				for (var i = 0; i < arr.length; i++) {
					if (reg1.test(arr[i])) {
						for (i = i + 1; i < arr.length; i++) {
							arr2.push(arr[i]);
							if (reg2.test(arr[i])) {
								i++;
								break;
							}
						}
					}
				}
				code = arr2.join('\r\n');
				logger.info(code);
				initCode = arr.slice(i).join('\r\n');
				if (initCode.indexOf('Molecule.extend') != -1) {
					constructor.attr('extends', '');
				}
				var pattern = java.util.regex.Pattern.compile("function\\s+[\\w]+\\s*\\(.*\\)\\s*\\{", "m");
				var m = pattern.matcher(code);
				m.find();
				code = code.substr(m.end() + 1);
				code = code.substring(0, code.lastIndexOf('}') - 1);
				constructor.html(code);
			}
			
			Array.prototype.forEach.call(element.parent().select('style[molecule-for=' + fullname + ']'),
				function(style){
					template.appendChild(style);
				}
			);
			
			element.html(element.html().replace('<!-- {INNER_HTML} -->', '<molecule-placeholder />'));
		}

		%]<textarea>[%= document.outerHtml() %]</textarea> [%
	}


	function findConstructor(element, fullname, name) {
		var scripts = element.select('script');
		if (scripts.isEmpty()) {
			scripts = element.parent().select('script[molecule-for=' + fullname + ']')
		} 
		for (var i = 0; i < scripts.size(); i++) {
			if (/\/\/\s*MOLECULE_DEF/.test(scripts[i].html())) {
				return scripts[i];
			}
		}
	}
%]
<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<script src="../jslib/jquery-3.2.1.js"></script>
	<link href="../jslib/bootstrap-3.3.4/css/bootstrap.css" rel="stylesheet" media="screen">
	<script src="../jslib/jquery-3.2.1.js"></script>
	<script src="../jslib/bootstrap-3.3.4/js/bootstrap.min.js"></script>
</head>

<body class=".container">
	<h1>Upgrade molecule to v1</h1>
	<p>
		上一版本的 defCss 已作废。使用 [].defCss() 输出 css 粘贴为 style 即可。
	</p>
	<form method="post" enctype="multipart/form-data" action="upgrade.jssp">
		<input type="file" name="file">
		<input type="hidden" name="submit" value="1">
		<input type="submit">
	</form>
	<p>
		<button onclick="copyToClipboard(document.querySelector('pre'));">Copy</button>
	</p>
</body>
<script>
		Array.prototype.defCss = function(container){
			container = container || document.head;
			var styleElement = document.createElement("style");
		    styleElement.type = "text/css";
		    container.appendChild(styleElement);
		    
		    var styleSheet = styleElement.sheet;
			for(var i=0; i<this.length; i++){
				var rule = this[i];
				var selector = rule.$;
				var rules = '';
				for(var attr in rule){ if(rule.hasOwnProperty(attr) && attr != '$'){
					rules += attr.replace(/_/g, '-') + ':' + rule[attr] + ';';
				}}
				if (styleSheet.insertRule)
		            styleSheet.insertRule(selector + ' {' + rules + '}', styleSheet.cssRules.length);
		        else if (styleSheet.addRule)
		            styleSheet.addRule(selector, rules);
		        			
			}
		    
		    return 	"<style>\r\n" + 
		    			Array.prototype.map.call(styleElement.sheet.rules, rule => '\t' + rule.cssText).join('\r\n') +
		    	 	"\r\n</style>";
		}
		
		
		function copyToClipboard(elem) {
			  // create hidden text element, if it doesn't already exist
		    var targetId = "_hiddenCopyText_";
		    var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
		    var origSelectionStart, origSelectionEnd;
		    if (isInput) {
		        // can just use the original source element for the selection and copy
		        target = elem;
		        origSelectionStart = elem.selectionStart;
		        origSelectionEnd = elem.selectionEnd;
		    } else {
		        // must use a temporary form element for the selection and copy
		        target = document.getElementById(targetId);
		        if (!target) {
		            var target = document.createElement("textarea");
		            target.style.position = "absolute";
		            target.style.left = "-9999px";
		            target.style.top = "0";
		            target.id = targetId;
		            document.body.appendChild(target);
		        }
		        target.textContent = elem.innerText;
		    }
		    // select the content
		    var currentFocus = document.activeElement;
		    target.focus();
		    target.setSelectionRange(0, target.value.length);
		    
		    // copy the selection
		    var succeed;
		    try {
		    	  succeed = document.execCommand("copy");
		    } catch(e) {
		        succeed = false;
		    }
		    // restore original focus
		    if (currentFocus && typeof currentFocus.focus === "function") {
		        currentFocus.focus();
		    }
		    
		    if (isInput) {
		        // restore prior selection
		        elem.setSelectionRange(origSelectionStart, origSelectionEnd);
		    } else {
		        // clear temporary content
		        target.textContent = "";
		    }
		    return succeed;
		}
	</script>
</html>